[gd_scene load_steps=5 format=2]

[ext_resource path="res://cga.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "// CGA raster shader
// svofski 2023
// input: CGA memory area from B800:0000, palette
// output: display texture
shader_type canvas_item;

uniform sampler2D b800;

uniform vec4 palette_0: hint_color = vec4(0.0,0.0,0.0,1.0);
uniform vec4 palette_1: hint_color = vec4(0.0, 0.625, 0.0, 1.0);
uniform vec4 palette_2: hint_color = vec4(0.625, 0.0, 0.0, 1.0);
uniform vec4 palette_3: hint_color = vec4(0.625, 0.3125, 0.0, 1.0);

const vec2 mem_sz = vec2(80,200);    // input texture pixel size (80, 200)
const vec2 tex_sz = vec2(320,200);  // output texture pixel size (320, 200)

vec4 cgacolor(vec2 uv)
{
	vec4 cga_palette[4] = {palette_0, palette_1, palette_2, palette_3};
	
	ivec2 screen_xy = ivec2(floor(uv * tex_sz)); // 0,0+320x200

	int texel_y = screen_xy.y / 2 + 100 * (screen_xy.y & 1);
	int texel_x = int(screen_xy.x / 4);
	
    int byte = ivec4(floor(255.0 * texelFetch(b800, ivec2(texel_x, texel_y), 0))).r;
	
	int pixel = screen_xy.x % 4;
	int shitf = 6 - (pixel << 1);
	
	return vec4(cga_palette[(byte >> shitf) & 3].xyz, 1.0);	
}

void fragment() {
    vec4 c = cgacolor(UV);
    COLOR.rgba = c;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/palette_0 = Color( 0, 0, 0, 1 )
shader_param/palette_1 = Color( 0, 0.625, 0, 1 )
shader_param/palette_2 = Color( 0.625, 0, 0, 1 )
shader_param/palette_3 = Color( 0.625, 0.3125, 0, 1 )

[sub_resource type="AudioStreamGenerator" id=3]

[node name="cga" type="Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 0
grow_vertical = 0
size_flags_horizontal = 2
size_flags_vertical = 2
script = ExtResource( 1 )

[node name="CgaTextureRect" type="TextureRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
expand = true
stretch_mode = 5

[node name="Player" type="AudioStreamPlayer" parent="."]
stream = SubResource( 3 )
volume_db = -19.281
